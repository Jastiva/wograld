/*
 * Gridarta MMORPG map editor for Crossfire, Daimonin and similar games.
 * Copyright (C) 2000-2011 The Gridarta Developers.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

package net.sf.gridarta.gui.utils;

import java.awt.event.ActionEvent;
import javax.swing.AbstractButton;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.text.JTextComponent;
import net.sf.gridarta.model.data.NamedObject;
import net.sf.gridarta.model.data.NamedObjects;
import net.sf.gridarta.model.face.FaceObjectProviders;
import net.sf.gridarta.model.face.FaceObjectProvidersListener;
import org.jetbrains.annotations.NotNull;

/**
 * A {@link TreeChooseAction} that updates a face label.
 * @author Andreas Kirschbaum
 */
public class FaceTreeChooseAction extends TreeChooseAction {

    /**
     * The serial version UID.
     */
    private static final long serialVersionUID = 1L;

    /**
     * The button showing the icon.
     */
    @NotNull
    private final AbstractButton icon;

    /**
     * The {@link FaceObjectProviders} for looking up faces.
     */
    @NotNull
    private final FaceObjectProviders faceObjectProviders;

    /**
     * The {@link ImageIcon} for no animations.
     */
    @NotNull
    private final ImageIcon noFaceSquareIcon;

    /**
     * The {@link ImageIcon} for undefined animations.
     */
    @NotNull
    private final ImageIcon unknownSquareIcon;

    /**
     * Create a TreeChooseAction.
     * @param text the text for the button
     * @param textComponent the text component that holds the current
     * face/animation name
     * @param icon the label showing the icon
     * @param namedObjects the named objects providing the face names tree
     * @param faceObjectProviders the face provider for looking up icons
     * @param noFaceSquareIcon the image icon for no animations
     * @param unknownSquareIcon the image icon for undefined animations
     */
    public FaceTreeChooseAction(@NotNull final String text, @NotNull final JTextComponent textComponent, @NotNull final AbstractButton icon, @NotNull final NamedObjects<? extends NamedObject> namedObjects, @NotNull final FaceObjectProviders faceObjectProviders, @NotNull final ImageIcon noFaceSquareIcon, @NotNull final ImageIcon unknownSquareIcon) {
        super(text, textComponent, namedObjects, faceObjectProviders);
        this.icon = icon;
        this.faceObjectProviders = faceObjectProviders;
        this.noFaceSquareIcon = noFaceSquareIcon;
        this.unknownSquareIcon = unknownSquareIcon;

        final FaceObjectProvidersListener faceObjectProvidersListener = new FaceObjectProvidersListener() {

            @Override
            public void facesReloaded() {
                updateIconLabel();
            }

        };
        faceObjectProviders.addFaceObjectProvidersListener(faceObjectProvidersListener);

        updateIconLabel();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void actionPerformed(@NotNull final ActionEvent e) {
        super.actionPerformed(e);
        updateIconLabel();
    }

    /**
     * Updates the icon of {@link #icon} to reflect the current face name.
     */
    public final void updateIconLabel() {
        final String faceName = getFaceName();
        final Icon face;
        if (faceName.isEmpty() || faceName.equals("NONE")) {
            face = noFaceSquareIcon;
        } else {
            final Icon tmp = faceObjectProviders.getImageIconForFacename(faceName);
            face = tmp == null ? unknownSquareIcon : tmp;
        }
        icon.setIcon(face);
    }

    /**
     * {@inheritDoc}
     */
    @NotNull
    @Override
    protected Object clone() {
        return super.clone();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void setEnabled(final boolean newValue) {
        super.setEnabled(newValue);
        icon.setEnabled(newValue);
    }

}
