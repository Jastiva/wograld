<?xml version="1.0" encoding="UTF-8"?>
<script>
  <name>MapValidator</name>
  <code><![CDATA[import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.InputStream;
import java.util.Iterator;
import net.sf.gridarta.model.gameobject.GameObject;
import net.sf.gridarta.model.io.RecursiveFileIterator;
import net.sf.gridarta.model.validation.ErrorCollector;
import net.sf.gridarta.model.validation.errors.ValidationError;

String checkMap(File mapFile, String mapPath) {
    try {
        map = mapManager.openMapFile(mapFile, false);
    } catch (IOException ex) {
        print("Cannot load map '"+mapFile+"': "+ex.getMessage());
        return null;
    }
    if (map == null) {
        print(mapPath + ":");
        print("- cannot load map file");
        return null;
    }

    ErrorCollector errorCollector;
    try {
        try {
            validators.validateAll(map.getMapModel());
        } finally {
            errorCollector = map.getMapModel().getErrors();
        }
    } finally {
        mapManager.release(map);
    }

    StringBuffer sb = new StringBuffer();
    Iterator it = errorCollector.iterator();
    while (it.hasNext()) {
        ValidationError validationError = it.next();

        sb.append(validationError);

        Iterator it2 = validationError.getGameObjects().iterator();
        while (it2.hasNext()) {
            GameObject gameObject = it2.next();
            sb.append(" [").append(gameObject.getBestName()).append(']');
        }

        String parameter0 = validationError.getParameter(0);
        if (parameter0 != null) {
            sb.append(" [").append(parameter0);
            String parameter1 = validationError.getParameter(1);
            if (parameter1 != null) {
                sb.append(", ").append(parameter1);
            }
            sb.append(']');
        }
        sb.append("\n");
    }

    return sb.toString();
}

if (baseDirectory == null || baseDirectory.length() <= 0) {
    baseDirectory = "/";
}
print("Checking maps below " + baseDirectory + "...");
if (baseDirectory.endsWith("/")) {
    baseDirectory = baseDirectory.substring(0, baseDirectory.length() - 1);
}

String mapDefaultFolder = globalSettings.getMapsDirectory().getPath();
String rootDirectory = mapDefaultFolder + baseDirectory;
boolean ok = true;
Iterator it = new RecursiveFileIterator(new File(rootDirectory));
while (it.hasNext()) {
    File file = it.next();
    String name = file.getName();
    String path = file.getPath();
    if (file.isFile()
    && path.startsWith(rootDirectory)
    && !name.endsWith(".expected")) {
        File expectedFile = new File(file.getPath() + ".expected");
        if (expectedFile.exists()) {
            String result = checkMap(file, file.getPath().substring(mapDefaultFolder.length()));

            final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
            final InputStream inputStream = new FileInputStream(expectedFile);
            try {
                final byte[] buf = new byte[1024];
                for (;;) {
                    final int len = inputStream.read(buf);
                    if (len == -1) {
                        break;
                    }
                    byteArrayOutputStream.write(buf, 0, len);
                }
            } finally {
                inputStream.close();
            }
            final String expected = byteArrayOutputStream.toString("UTF-8");
            if (result.equals(expected)) {
                print(file + ": OK");
            } else {
                print(file + ": unexpected result:");
                print(result);
                print("expected result:");
                print(expected);
                ok = false;
            }
        }
    }
}
if (!ok) {
    throw new AssertionError();
}
]]></code>
  <mode>
    <autoboot>false</autoboot>
    <bash>true</bash>
    <filter>false</filter>
  </mode>
  <parameter>
    <name>baseDirectory</name>
    <description>Base Directory</description>
    <type>java.lang.String</type>
    <value>/</value>
  </parameter>
</script>

