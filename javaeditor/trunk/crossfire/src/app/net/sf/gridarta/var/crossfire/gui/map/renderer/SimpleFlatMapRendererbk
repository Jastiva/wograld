/*
 * Gridarta MMORPG map editor for Crossfire, Daimonin and similar games.
 * Copyright (C) 2000-2010 The Gridarta Developers.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

package net.sf.gridarta.var.crossfire.gui.map.renderer;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import javax.swing.ImageIcon;
import net.sf.gridarta.gui.map.renderer.AbstractMapRenderer;
import net.sf.gridarta.model.baseobject.BaseObject;
import net.sf.gridarta.model.mapmodel.MapModel;
import net.sf.gridarta.utils.Size2D;
import net.sf.gridarta.utils.SystemIcons;
import net.sf.gridarta.var.crossfire.IGUIConstants;
import net.sf.gridarta.var.crossfire.model.archetype.Archetype;
import net.sf.gridarta.var.crossfire.model.gameobject.GameObject;
import net.sf.gridarta.var.crossfire.model.maparchobject.MapArchObject;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

/**
 * Renders maps without MapGrid.
 * @author Andreas Kirschbaum
 */
public class SimpleFlatMapRenderer extends AbstractMapRenderer<GameObject, MapArchObject, Archetype> {

    /**
     * The serial version UID.
     */
    private static final long serialVersionUID = 1L;

    /**
     * The map model to render.
     * @serial
     */
    @NotNull
    private final MapModel<GameObject, MapArchObject, Archetype> mapModel;

    /**
     * The {@link SystemIcons} for creating icons.
     */
    @NotNull
    private final SystemIcons systemIcons;

    /**
     * Temporary variable.
     * @serial
     */
    @NotNull
    private final Point offset = new Point();

    /**
     * The {@link SmoothingRenderer} for rendering smoothed faces.
     */
    @NotNull
    private final SmoothingRenderer smoothingRenderer;

    /**
     * Creates a new instance.
     * @param mapModel the map model to render
     * @param systemIcons the system icons for creating icons
     * @param smoothingRenderer the smoothing renderer to use
     */
    public SimpleFlatMapRenderer(@NotNull final MapModel<GameObject, MapArchObject, Archetype> mapModel, @NotNull final SystemIcons systemIcons, @NotNull final SmoothingRenderer smoothingRenderer) {
        super(mapModel, null);
        this.mapModel = mapModel;
        this.systemIcons = systemIcons;
        this.smoothingRenderer = smoothingRenderer;
    }

    /**
     * {@inheritDoc}
     */
    @Nullable
    @Override
    public Point getSquareLocationAt(@NotNull final Point point, @Nullable final Point retPoint) {
        throw new IllegalStateException();
    }

    /**
     * {@inheritDoc}
     */
    @NotNull
    @Override
    public BufferedImage getFullImage() {
        final Size2D mapSize = mapModel.getMapArchObject().getMapSize();
        final int viewWidth = mapSize.getWidth() * IGUIConstants.SQUARE_WIDTH;
        final int viewHeight = mapSize.getHeight() * IGUIConstants.SQUARE_HEIGHT;
        final BufferedImage image = new BufferedImage(viewWidth, viewHeight, BufferedImage.TYPE_INT_ARGB);
        final Graphics g = image.getGraphics();
        try {
            paintComponent(g);
        } finally {
            g.dispose();
        }
        return image;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void forceRepaint() {
        throw new IllegalStateException();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected void paintComponent(@NotNull final Graphics g) {
        final Size2D mapSize = mapModel.getMapArchObject().getMapSize();
        g.setColor(Color.white);
        g.fillRect(0, 0, mapSize.getWidth() * IGUIConstants.SQUARE_WIDTH, mapSize.getHeight() * IGUIConstants.SQUARE_HEIGHT);
        final Point point = new Point();
        for (point.y = 0; point.y < mapSize.getHeight(); point.y++) {
            for (point.x = 0; point.x < mapSize.getWidth(); point.x++) {
                paintSquare(g, point);
            }
        }
    }

    /**
     * Paint one square.
     * @param graphics the graphics context to draw to
     * @param point the map coordinates of the square to draw
     */
    private void paintSquare(@NotNull final Graphics graphics, @NotNull final Point point) {
        if (mapModel.getMapSquare(point).isEmpty()) {
            systemIcons.getEmptySquareIcon().paintIcon(this, graphics, point.x * IGUIConstants.SQUARE_WIDTH, point.y * IGUIConstants.SQUARE_HEIGHT);
            return;
        }

        int layer = -1;
        for (final BaseObject<?, ?, ?, ?> node : mapModel.getMapSquare(point)) {
            if (node.getAttributeInt(GameObject.INVISIBLE, true) == 0) {
                layer++;
            }
            final ImageIcon img = node.getNormalImage();
            if (!node.isMulti() || (img.getIconWidth() == IGUIConstants.SQUARE_WIDTH && img.getIconHeight() == IGUIConstants.SQUARE_HEIGHT)) {
                offset.x = 0;
                offset.y = 0;
            } else {
                // this is an oversized image, so it must be shifted
                offset.x = IGUIConstants.SQUARE_WIDTH * (node.getArchetype().getMultiX() - node.getMinX());
                offset.y = IGUIConstants.SQUARE_HEIGHT * (node.getArchetype().getMultiY() - node.getMinY());
            }
            graphics.drawImage(img.getImage(), point.x * IGUIConstants.SQUARE_WIDTH, point.y * IGUIConstants.SQUARE_HEIGHT, point.x * IGUIConstants.SQUARE_WIDTH + IGUIConstants.SQUARE_WIDTH, point.y * IGUIConstants.SQUARE_HEIGHT + IGUIConstants.SQUARE_HEIGHT, offset.x, offset.y, offset.x + IGUIConstants.SQUARE_WIDTH, offset.y + IGUIConstants.SQUARE_HEIGHT, this);
            if (node.getAttributeInt(GameObject.SMOOTHLEVEL, true) > 0) {
                smoothingRenderer.paintSmooth(graphics, point, node.getAttributeInt(GameObject.SMOOTHLEVEL, true), layer, false, 0, 0);
            }
        }
        if (layer > -1) {
            smoothingRenderer.paintSmooth(graphics, point, 1, layer + 1, true, 0, 0);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void closeNotify() {
    }

    /**
     * {@inheritDoc}
     */
    @NotNull
    @Override
    public Rectangle getSquareBounds(@NotNull final Point p) {
        throw new IllegalStateException();
    }

}
