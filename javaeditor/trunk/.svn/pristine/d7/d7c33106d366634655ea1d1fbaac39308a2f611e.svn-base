/*
 * Gridarta MMORPG map editor for Crossfire, Daimonin and similar games.
 * Copyright (C) 2000-2010 The Gridarta Developers.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

package net.sf.gridarta.model.face;

import java.lang.ref.SoftReference;
import java.util.HashMap;
import java.util.Map;
import javax.swing.ImageIcon;
import org.apache.log4j.Category;
import org.apache.log4j.Logger;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

/**
 * Abstract Base class for FaceProviders which implements a memory sensitive
 * cache.
 * @author <a href="mailto:cher@riedquat.de">Christian Hujer</a>
 */
public abstract class AbstractFaceProvider implements FaceProvider {

    /**
     * The Logger for printing log messages.
     */
    private static final Category log = Logger.getLogger(AbstractFaceProvider.class);

    /**
     * The HashMap to provide the icons from. Note: Weak hashing does not differ
     * because the keys are definitely referenced elsewhere.
     */
    private final Map<String, SoftReference<ImageIcon>> cache = new HashMap<String, SoftReference<ImageIcon>>();

    /**
     * {@inheritDoc}
     */
    @Nullable
    @Override
    public ImageIcon getImageIconForFacename(@NotNull final String faceName) {
        ImageIcon icon = null;
        final SoftReference<ImageIcon> ref = cache.get(faceName);
        if (ref != null) {
            icon = ref.get();
        }
        if (icon == null) {
            icon = createImage(faceName);
            if (icon != null) {
                cache.put(faceName, new SoftReference<ImageIcon>(icon));
            }
        }
        return icon;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void reload() {
        if (log.isDebugEnabled()) {
            log.debug("Clearing image cache.");
        }
        cache.clear();
    }

    /**
     * Create an image not found in the cache.
     * @param faceName face name to get image for, excluding path and ending
     * @return icon for faceName
     */
    @Nullable
    protected abstract ImageIcon createImage(@NotNull String faceName);

}
