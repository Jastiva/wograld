# Makefile.in generated by automake 1.9.5 from Makefile.am.
# test/unit/random_maps/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.




SOURCES = $(libstubs_a_SOURCES) check_decor.c check_door.c check_exit.c check_expand2x.c check_floor.c check_maze_gen.c check_monster.c check_random_map.c check_reader.c check_rogue_layout.c check_room_gen_onion.c check_room_gen_spiral.c check_snake.c check_special.c check_square_spiral.c check_standalone.c check_style.c check_test.c check_treasure.c check_wall.c

srcdir = .
top_srcdir = ../../..

pkgdatadir = $(datadir)/wograld
pkglibdir = $(libdir)/wograld
pkgincludedir = $(includedir)/wograld
top_builddir = ../../..
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = /usr/bin/install -c
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-unknown-linux-gnu
host_triplet = x86_64-unknown-linux-gnu
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in \
	$(top_srcdir)/check-fragment.am
noinst_PROGRAMS = $(am__EXEEXT_1)
subdir = test/unit/random_maps
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/acinclude.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(SHELL) $(top_srcdir)/utils/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/include/autoconf.h
CONFIG_CLEAN_FILES =
LIBRARIES = $(noinst_LIBRARIES)
ARFLAGS = cru
libstubs_a_AR = $(AR) $(ARFLAGS)
libstubs_a_LIBADD =
am_libstubs_a_OBJECTS = stubs_random.$(OBJEXT)
libstubs_a_OBJECTS = $(am_libstubs_a_OBJECTS)
am__EXEEXT_1 = check_decor$(EXEEXT) check_door$(EXEEXT) \
	check_exit$(EXEEXT) check_expand2x$(EXEEXT) \
	check_floor$(EXEEXT) check_maze_gen$(EXEEXT) \
	check_monster$(EXEEXT) check_random_map$(EXEEXT) \
	check_reader$(EXEEXT) check_rogue_layout$(EXEEXT) \
	check_room_gen_onion$(EXEEXT) check_room_gen_spiral$(EXEEXT) \
	check_snake$(EXEEXT) check_special$(EXEEXT) \
	check_square_spiral$(EXEEXT) check_standalone$(EXEEXT) \
	check_style$(EXEEXT) check_test$(EXEEXT) \
	check_treasure$(EXEEXT) check_wall$(EXEEXT)
PROGRAMS = $(noinst_PROGRAMS)
check_decor_SOURCES = check_decor.c
check_decor_OBJECTS = check_decor.$(OBJEXT)
check_decor_LDADD = $(LDADD)
check_decor_DEPENDENCIES = ../../../common/libcross.a libstubs.a \
	../../../socket/libsocket.a \
	../../../random_maps/librandom_map.a
check_door_SOURCES = check_door.c
check_door_OBJECTS = check_door.$(OBJEXT)
check_door_LDADD = $(LDADD)
check_door_DEPENDENCIES = ../../../common/libcross.a libstubs.a \
	../../../socket/libsocket.a \
	../../../random_maps/librandom_map.a
check_exit_SOURCES = check_exit.c
check_exit_OBJECTS = check_exit.$(OBJEXT)
check_exit_LDADD = $(LDADD)
check_exit_DEPENDENCIES = ../../../common/libcross.a libstubs.a \
	../../../socket/libsocket.a \
	../../../random_maps/librandom_map.a
check_expand2x_SOURCES = check_expand2x.c
check_expand2x_OBJECTS = check_expand2x.$(OBJEXT)
check_expand2x_LDADD = $(LDADD)
check_expand2x_DEPENDENCIES = ../../../common/libcross.a libstubs.a \
	../../../socket/libsocket.a \
	../../../random_maps/librandom_map.a
check_floor_SOURCES = check_floor.c
check_floor_OBJECTS = check_floor.$(OBJEXT)
check_floor_LDADD = $(LDADD)
check_floor_DEPENDENCIES = ../../../common/libcross.a libstubs.a \
	../../../socket/libsocket.a \
	../../../random_maps/librandom_map.a
check_maze_gen_SOURCES = check_maze_gen.c
check_maze_gen_OBJECTS = check_maze_gen.$(OBJEXT)
check_maze_gen_LDADD = $(LDADD)
check_maze_gen_DEPENDENCIES = ../../../common/libcross.a libstubs.a \
	../../../socket/libsocket.a \
	../../../random_maps/librandom_map.a
check_monster_SOURCES = check_monster.c
check_monster_OBJECTS = check_monster.$(OBJEXT)
check_monster_LDADD = $(LDADD)
check_monster_DEPENDENCIES = ../../../common/libcross.a libstubs.a \
	../../../socket/libsocket.a \
	../../../random_maps/librandom_map.a
check_random_map_SOURCES = check_random_map.c
check_random_map_OBJECTS = check_random_map.$(OBJEXT)
check_random_map_LDADD = $(LDADD)
check_random_map_DEPENDENCIES = ../../../common/libcross.a libstubs.a \
	../../../socket/libsocket.a \
	../../../random_maps/librandom_map.a
check_reader_SOURCES = check_reader.c
check_reader_OBJECTS = check_reader.$(OBJEXT)
check_reader_LDADD = $(LDADD)
check_reader_DEPENDENCIES = ../../../common/libcross.a libstubs.a \
	../../../socket/libsocket.a \
	../../../random_maps/librandom_map.a
check_rogue_layout_SOURCES = check_rogue_layout.c
check_rogue_layout_OBJECTS = check_rogue_layout.$(OBJEXT)
check_rogue_layout_LDADD = $(LDADD)
check_rogue_layout_DEPENDENCIES = ../../../common/libcross.a \
	libstubs.a ../../../socket/libsocket.a \
	../../../random_maps/librandom_map.a
check_room_gen_onion_SOURCES = check_room_gen_onion.c
check_room_gen_onion_OBJECTS = check_room_gen_onion.$(OBJEXT)
check_room_gen_onion_LDADD = $(LDADD)
check_room_gen_onion_DEPENDENCIES = ../../../common/libcross.a \
	libstubs.a ../../../socket/libsocket.a \
	../../../random_maps/librandom_map.a
check_room_gen_spiral_SOURCES = check_room_gen_spiral.c
check_room_gen_spiral_OBJECTS = check_room_gen_spiral.$(OBJEXT)
check_room_gen_spiral_LDADD = $(LDADD)
check_room_gen_spiral_DEPENDENCIES = ../../../common/libcross.a \
	libstubs.a ../../../socket/libsocket.a \
	../../../random_maps/librandom_map.a
check_snake_SOURCES = check_snake.c
check_snake_OBJECTS = check_snake.$(OBJEXT)
check_snake_LDADD = $(LDADD)
check_snake_DEPENDENCIES = ../../../common/libcross.a libstubs.a \
	../../../socket/libsocket.a \
	../../../random_maps/librandom_map.a
check_special_SOURCES = check_special.c
check_special_OBJECTS = check_special.$(OBJEXT)
check_special_LDADD = $(LDADD)
check_special_DEPENDENCIES = ../../../common/libcross.a libstubs.a \
	../../../socket/libsocket.a \
	../../../random_maps/librandom_map.a
check_square_spiral_SOURCES = check_square_spiral.c
check_square_spiral_OBJECTS = check_square_spiral.$(OBJEXT)
check_square_spiral_LDADD = $(LDADD)
check_square_spiral_DEPENDENCIES = ../../../common/libcross.a \
	libstubs.a ../../../socket/libsocket.a \
	../../../random_maps/librandom_map.a
check_standalone_SOURCES = check_standalone.c
check_standalone_OBJECTS = check_standalone.$(OBJEXT)
check_standalone_LDADD = $(LDADD)
check_standalone_DEPENDENCIES = ../../../common/libcross.a libstubs.a \
	../../../socket/libsocket.a \
	../../../random_maps/librandom_map.a
check_style_SOURCES = check_style.c
check_style_OBJECTS = check_style.$(OBJEXT)
check_style_LDADD = $(LDADD)
check_style_DEPENDENCIES = ../../../common/libcross.a libstubs.a \
	../../../socket/libsocket.a \
	../../../random_maps/librandom_map.a
check_test_SOURCES = check_test.c
check_test_OBJECTS = check_test.$(OBJEXT)
check_test_LDADD = $(LDADD)
check_test_DEPENDENCIES = ../../../common/libcross.a libstubs.a \
	../../../socket/libsocket.a \
	../../../random_maps/librandom_map.a
check_treasure_SOURCES = check_treasure.c
check_treasure_OBJECTS = check_treasure.$(OBJEXT)
check_treasure_LDADD = $(LDADD)
check_treasure_DEPENDENCIES = ../../../common/libcross.a libstubs.a \
	../../../socket/libsocket.a \
	../../../random_maps/librandom_map.a
check_wall_SOURCES = check_wall.c
check_wall_OBJECTS = check_wall.$(OBJEXT)
check_wall_LDADD = $(LDADD)
check_wall_DEPENDENCIES = ../../../common/libcross.a libstubs.a \
	../../../socket/libsocket.a \
	../../../random_maps/librandom_map.a
DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)/include
depcomp = $(SHELL) $(top_srcdir)/utils/depcomp
am__depfiles_maybe = depfiles
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --tag=CC --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
SOURCES = $(libstubs_a_SOURCES) check_decor.c check_door.c \
	check_exit.c check_expand2x.c check_floor.c check_maze_gen.c \
	check_monster.c check_random_map.c check_reader.c \
	check_rogue_layout.c check_room_gen_onion.c \
	check_room_gen_spiral.c check_snake.c check_special.c \
	check_square_spiral.c check_standalone.c check_style.c \
	check_test.c check_treasure.c check_wall.c
DIST_SOURCES = $(libstubs_a_SOURCES) check_decor.c check_door.c \
	check_exit.c check_expand2x.c check_floor.c check_maze_gen.c \
	check_monster.c check_random_map.c check_reader.c \
	check_rogue_layout.c check_room_gen_onion.c \
	check_room_gen_spiral.c check_snake.c check_special.c \
	check_square_spiral.c check_standalone.c check_style.c \
	check_test.c check_treasure.c check_wall.c
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/lori/Wogralddev/workingcvs/wogtesta/server/utils/missing --run aclocal-1.9
AMDEP_FALSE = #
AMDEP_TRUE = 
AMTAR = ${SHELL} /home/lori/Wogralddev/workingcvs/wogtesta/server/utils/missing --run tar
AR = ar
AUTOCONF = ${SHELL} /home/lori/Wogralddev/workingcvs/wogtesta/server/utils/missing --run autoconf
AUTOHEADER = ${SHELL} /home/lori/Wogralddev/workingcvs/wogtesta/server/utils/missing --run autoheader
AUTOMAKE = ${SHELL} /home/lori/Wogralddev/workingcvs/wogtesta/server/utils/missing --run automake-1.9
AWK = gawk
BASENAME = /usr/bin/basename
BUNZIP = /bin/bunzip2
BZIP = /bin/bzip2
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = 
CHECK_CFLAGS = 
CHECK_LIBS = 
COMPRESS = 
CPP = gcc -E
CPPFLAGS = 
WOGEDIT = 
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
ECHO = echo
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = grep -E
EXEEXT = 
F77 = 
FFLAGS = 
GUNZIP = /bin/gunzip
GZIP = /bin/gzip
HAVE_CHECK_FALSE = 
HAVE_CHECK_TRUE = #
HAVE_LIBDL_FALSE = #
HAVE_LIBDL_TRUE = 
HAVE_X_FALSE = 
HAVE_X_TRUE = #
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
LATEX = /usr/bin/latex
LDFLAGS = 
LEX = ${SHELL} /home/lori/Wogralddev/workingcvs/wogtesta/server/utils/missing --run flex
LEXLIB = 
LEX_OUTPUT_ROOT = 
LIBOBJS = 
LIBS = -lz -lcrypt -lm -lnsl 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LN_S = ln -s
LTLIBOBJS = 
MAINT = #
MAINTAINER_MODE_FALSE = 
MAINTAINER_MODE_TRUE = #
MAKEINFO = ${SHELL} /home/lori/Wogralddev/workingcvs/wogtesta/server/utils/missing --run makeinfo
OBJEXT = o
PACKAGE = wograld
PACKAGE_BUGREPORT = wograld-devel@listserv.real-time.com
PACKAGE_NAME = wograld
PACKAGE_STRING = wograld 1.9.1
PACKAGE_TARNAME = wograld
PACKAGE_VERSION = 1.9.1
PATH_SEPARATOR = :
PERL = /usr/bin/perl
PLUGIN_PYTHON = 
PROCESS_XSLT_FALSE = 
PROCESS_XSLT_TRUE = #
PYTHON_LIB = 
PYTHON_PLUGIN_FALSE = 
PYTHON_PLUGIN_TRUE = #
PY_INCLUDES = 
PY_LIBS = 
RANLIB = ranlib
SET_MAKE = 
SHELL = /bin/bash
STRIP = strip
TAR = /bin/tar
UNCOMPRESS = /bin/uncompress
VERSION = 1.9.1
X11LIBS =   -lX11 -lICE -lSM -lXext -lXt -lpng -lz
XSLTENGINE = 
X_CFLAGS = 
X_EXTRA_LIBS = 
X_LIBS = 
X_PRE_LIBS = 
ac_ct_AR = ar
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_F77 = 
ac_ct_RANLIB = ranlib
ac_ct_STRIP = strip
am__fastdepCC_FALSE = #
am__fastdepCC_TRUE = 
am__fastdepCXX_FALSE = #
am__fastdepCXX_TRUE = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = x86_64-unknown-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = unknown
check_xslt_forcedprogfound = 
check_xslt_sablotronfound = notfound
check_xslt_xsltprocfound = notfound
datadir = ${prefix}/share
exec_prefix = ${prefix}
host = x86_64-unknown-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = unknown
includedir = ${prefix}/include
infodir = ${prefix}/info
install_sh = /home/lori/Wogralddev/workingcvs/wogtesta/server/utils/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localstatedir = ${prefix}/var
mandir = ${prefix}/man
mkdir_p = mkdir -p --
no_x = yes
oldincludedir = /usr/include
pkgconfdir = ${prefix}/etc/wograld
pkgstatedir = ${prefix}/var/wograld
prefix = /usr/games/wograld
program_transform_name = s,x,x,
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
sysconfdir = ${prefix}/etc
target_alias = 
x_includes = NONE
x_libraries = NONE
noinst_LIBRARIES = libstubs.a
libstubs_a_SOURCES = stubs_random.c
LDADD = ../../../common/libcross.a libstubs.a ../../../socket/libsocket.a ../../../random_maps/librandom_map.a $(LIBDL) 
CHECK_ROOT = ../../
CHECK_FOLDER = unit/random_maps
CHECK_PARENT_NAME = Unit
LOGDIR = $(top_srcdir)/test/logs/$(CHECK_FOLDER)
INCLUDES = -I${top_srcdir}/include -I${top_srcdir}/test/include
BUILT_SOURCES = $(LOGDIR)
AM_CPPFLAGS = -DRESSOURCES=\"$(srcdir)/../../resources\" -DLOGDIR=\"$(top_srcdir)/test/logs\" -DSOURCE_ROOT=\"$(srcdir)/../../../\"
#CHECK_HTML = logreport template-copy
#CHECK_TXT = textlog
TESTS = check_decor check_door check_exit check_expand2x check_floor check_maze_gen check_monster check_random_map check_reader check_rogue_layout check_room_gen_onion check_room_gen_spiral check_snake check_special check_square_spiral check_standalone check_style check_test check_treasure check_wall
all: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) all-am

.SUFFIXES:
.SUFFIXES: .c .lo .o .obj
$(srcdir)/Makefile.in: # $(srcdir)/Makefile.am $(top_srcdir)/check-fragment.am $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu  test/unit/random_maps/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  test/unit/random_maps/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure: # $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4): # $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

clean-noinstLIBRARIES:
	-test -z "$(noinst_LIBRARIES)" || rm -f $(noinst_LIBRARIES)
libstubs.a: $(libstubs_a_OBJECTS) $(libstubs_a_DEPENDENCIES) 
	-rm -f libstubs.a
	$(libstubs_a_AR) libstubs.a $(libstubs_a_OBJECTS) $(libstubs_a_LIBADD)
	$(RANLIB) libstubs.a

clean-noinstPROGRAMS:
	@list='$(noinst_PROGRAMS)'; for p in $$list; do \
	  f=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  echo " rm -f $$p $$f"; \
	  rm -f $$p $$f ; \
	done
check_decor$(EXEEXT): $(check_decor_OBJECTS) $(check_decor_DEPENDENCIES) 
	@rm -f check_decor$(EXEEXT)
	$(LINK) $(check_decor_LDFLAGS) $(check_decor_OBJECTS) $(check_decor_LDADD) $(LIBS)
check_door$(EXEEXT): $(check_door_OBJECTS) $(check_door_DEPENDENCIES) 
	@rm -f check_door$(EXEEXT)
	$(LINK) $(check_door_LDFLAGS) $(check_door_OBJECTS) $(check_door_LDADD) $(LIBS)
check_exit$(EXEEXT): $(check_exit_OBJECTS) $(check_exit_DEPENDENCIES) 
	@rm -f check_exit$(EXEEXT)
	$(LINK) $(check_exit_LDFLAGS) $(check_exit_OBJECTS) $(check_exit_LDADD) $(LIBS)
check_expand2x$(EXEEXT): $(check_expand2x_OBJECTS) $(check_expand2x_DEPENDENCIES) 
	@rm -f check_expand2x$(EXEEXT)
	$(LINK) $(check_expand2x_LDFLAGS) $(check_expand2x_OBJECTS) $(check_expand2x_LDADD) $(LIBS)
check_floor$(EXEEXT): $(check_floor_OBJECTS) $(check_floor_DEPENDENCIES) 
	@rm -f check_floor$(EXEEXT)
	$(LINK) $(check_floor_LDFLAGS) $(check_floor_OBJECTS) $(check_floor_LDADD) $(LIBS)
check_maze_gen$(EXEEXT): $(check_maze_gen_OBJECTS) $(check_maze_gen_DEPENDENCIES) 
	@rm -f check_maze_gen$(EXEEXT)
	$(LINK) $(check_maze_gen_LDFLAGS) $(check_maze_gen_OBJECTS) $(check_maze_gen_LDADD) $(LIBS)
check_monster$(EXEEXT): $(check_monster_OBJECTS) $(check_monster_DEPENDENCIES) 
	@rm -f check_monster$(EXEEXT)
	$(LINK) $(check_monster_LDFLAGS) $(check_monster_OBJECTS) $(check_monster_LDADD) $(LIBS)
check_random_map$(EXEEXT): $(check_random_map_OBJECTS) $(check_random_map_DEPENDENCIES) 
	@rm -f check_random_map$(EXEEXT)
	$(LINK) $(check_random_map_LDFLAGS) $(check_random_map_OBJECTS) $(check_random_map_LDADD) $(LIBS)
check_reader$(EXEEXT): $(check_reader_OBJECTS) $(check_reader_DEPENDENCIES) 
	@rm -f check_reader$(EXEEXT)
	$(LINK) $(check_reader_LDFLAGS) $(check_reader_OBJECTS) $(check_reader_LDADD) $(LIBS)
check_rogue_layout$(EXEEXT): $(check_rogue_layout_OBJECTS) $(check_rogue_layout_DEPENDENCIES) 
	@rm -f check_rogue_layout$(EXEEXT)
	$(LINK) $(check_rogue_layout_LDFLAGS) $(check_rogue_layout_OBJECTS) $(check_rogue_layout_LDADD) $(LIBS)
check_room_gen_onion$(EXEEXT): $(check_room_gen_onion_OBJECTS) $(check_room_gen_onion_DEPENDENCIES) 
	@rm -f check_room_gen_onion$(EXEEXT)
	$(LINK) $(check_room_gen_onion_LDFLAGS) $(check_room_gen_onion_OBJECTS) $(check_room_gen_onion_LDADD) $(LIBS)
check_room_gen_spiral$(EXEEXT): $(check_room_gen_spiral_OBJECTS) $(check_room_gen_spiral_DEPENDENCIES) 
	@rm -f check_room_gen_spiral$(EXEEXT)
	$(LINK) $(check_room_gen_spiral_LDFLAGS) $(check_room_gen_spiral_OBJECTS) $(check_room_gen_spiral_LDADD) $(LIBS)
check_snake$(EXEEXT): $(check_snake_OBJECTS) $(check_snake_DEPENDENCIES) 
	@rm -f check_snake$(EXEEXT)
	$(LINK) $(check_snake_LDFLAGS) $(check_snake_OBJECTS) $(check_snake_LDADD) $(LIBS)
check_special$(EXEEXT): $(check_special_OBJECTS) $(check_special_DEPENDENCIES) 
	@rm -f check_special$(EXEEXT)
	$(LINK) $(check_special_LDFLAGS) $(check_special_OBJECTS) $(check_special_LDADD) $(LIBS)
check_square_spiral$(EXEEXT): $(check_square_spiral_OBJECTS) $(check_square_spiral_DEPENDENCIES) 
	@rm -f check_square_spiral$(EXEEXT)
	$(LINK) $(check_square_spiral_LDFLAGS) $(check_square_spiral_OBJECTS) $(check_square_spiral_LDADD) $(LIBS)
check_standalone$(EXEEXT): $(check_standalone_OBJECTS) $(check_standalone_DEPENDENCIES) 
	@rm -f check_standalone$(EXEEXT)
	$(LINK) $(check_standalone_LDFLAGS) $(check_standalone_OBJECTS) $(check_standalone_LDADD) $(LIBS)
check_style$(EXEEXT): $(check_style_OBJECTS) $(check_style_DEPENDENCIES) 
	@rm -f check_style$(EXEEXT)
	$(LINK) $(check_style_LDFLAGS) $(check_style_OBJECTS) $(check_style_LDADD) $(LIBS)
check_test$(EXEEXT): $(check_test_OBJECTS) $(check_test_DEPENDENCIES) 
	@rm -f check_test$(EXEEXT)
	$(LINK) $(check_test_LDFLAGS) $(check_test_OBJECTS) $(check_test_LDADD) $(LIBS)
check_treasure$(EXEEXT): $(check_treasure_OBJECTS) $(check_treasure_DEPENDENCIES) 
	@rm -f check_treasure$(EXEEXT)
	$(LINK) $(check_treasure_LDFLAGS) $(check_treasure_OBJECTS) $(check_treasure_LDADD) $(LIBS)
check_wall$(EXEEXT): $(check_wall_OBJECTS) $(check_wall_DEPENDENCIES) 
	@rm -f check_wall$(EXEEXT)
	$(LINK) $(check_wall_LDFLAGS) $(check_wall_OBJECTS) $(check_wall_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/check_decor.Po
include ./$(DEPDIR)/check_door.Po
include ./$(DEPDIR)/check_exit.Po
include ./$(DEPDIR)/check_expand2x.Po
include ./$(DEPDIR)/check_floor.Po
include ./$(DEPDIR)/check_maze_gen.Po
include ./$(DEPDIR)/check_monster.Po
include ./$(DEPDIR)/check_random_map.Po
include ./$(DEPDIR)/check_reader.Po
include ./$(DEPDIR)/check_rogue_layout.Po
include ./$(DEPDIR)/check_room_gen_onion.Po
include ./$(DEPDIR)/check_room_gen_spiral.Po
include ./$(DEPDIR)/check_snake.Po
include ./$(DEPDIR)/check_special.Po
include ./$(DEPDIR)/check_square_spiral.Po
include ./$(DEPDIR)/check_standalone.Po
include ./$(DEPDIR)/check_style.Po
include ./$(DEPDIR)/check_test.Po
include ./$(DEPDIR)/check_treasure.Po
include ./$(DEPDIR)/check_wall.Po
include ./$(DEPDIR)/stubs_random.Po

.c.o:
	if $(COMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c $<

.c.obj:
	if $(COMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ `$(CYGPATH_W) '$<'`; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `$(CYGPATH_W) '$<'`

.c.lo:
	if $(LTCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Plo"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LTCOMPILE) -c -o $@ $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:
	-rm -f libtool
uninstall-info-am:

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

check-TESTS: $(TESTS)
	@failed=0; all=0; xfail=0; xpass=0; skip=0; \
	srcdir=$(srcdir); export srcdir; \
	list='$(TESTS)'; \
	if test -n "$$list"; then \
	  for tst in $$list; do \
	    if test -f ./$$tst; then dir=./; \
	    elif test -f $$tst; then dir=; \
	    else dir="$(srcdir)/"; fi; \
	    if $(TESTS_ENVIRONMENT) $${dir}$$tst; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *" $$tst "*) \
		xpass=`expr $$xpass + 1`; \
		failed=`expr $$failed + 1`; \
		echo "XPASS: $$tst"; \
	      ;; \
	      *) \
		echo "PASS: $$tst"; \
	      ;; \
	      esac; \
	    elif test $$? -ne 77; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *" $$tst "*) \
		xfail=`expr $$xfail + 1`; \
		echo "XFAIL: $$tst"; \
	      ;; \
	      *) \
		failed=`expr $$failed + 1`; \
		echo "FAIL: $$tst"; \
	      ;; \
	      esac; \
	    else \
	      skip=`expr $$skip + 1`; \
	      echo "SKIP: $$tst"; \
	    fi; \
	  done; \
	  if test "$$failed" -eq 0; then \
	    if test "$$xfail" -eq 0; then \
	      banner="All $$all tests passed"; \
	    else \
	      banner="All $$all tests behaved as expected ($$xfail expected failures)"; \
	    fi; \
	  else \
	    if test "$$xpass" -eq 0; then \
	      banner="$$failed of $$all tests failed"; \
	    else \
	      banner="$$failed of $$all tests did not behave as expected ($$xpass unexpected passes)"; \
	    fi; \
	  fi; \
	  dashes="$$banner"; \
	  skipped=""; \
	  if test "$$skip" -ne 0; then \
	    skipped="($$skip tests were not run)"; \
	    test `echo "$$skipped" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$skipped"; \
	  fi; \
	  report=""; \
	  if test "$$failed" -ne 0 && test -n "$(PACKAGE_BUGREPORT)"; then \
	    report="Please report to $(PACKAGE_BUGREPORT)"; \
	    test `echo "$$report" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$report"; \
	  fi; \
	  dashes=`echo "$$dashes" | sed s/./=/g`; \
	  echo "$$dashes"; \
	  echo "$$banner"; \
	  test -z "$$skipped" || echo "$$skipped"; \
	  test -z "$$report" || echo "$$report"; \
	  echo "$$dashes"; \
	  test "$$failed" -eq 0; \
	else :; fi

distdir: $(DISTFILES)
	$(mkdir_p) $(distdir)/../../..
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkdir_p) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) check-TESTS check-local
check: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) check-am
all-am: Makefile $(LIBRARIES) $(PROGRAMS)
installdirs:
install: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
	-test -z "$(BUILT_SOURCES)" || rm -f $(BUILT_SOURCES)
clean: clean-am

clean-am: clean-generic clean-libtool clean-local \
	clean-noinstLIBRARIES clean-noinstPROGRAMS mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-libtool distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am:

install-exec-am:

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-info-am

.PHONY: CTAGS GTAGS all all-am check check-TESTS check-am check-local \
	clean clean-generic clean-libtool clean-local \
	clean-noinstLIBRARIES clean-noinstPROGRAMS ctags distclean \
	distclean-compile distclean-generic distclean-libtool \
	distclean-tags distdir dvi dvi-am html html-am info info-am \
	install install-am install-data install-data-am install-exec \
	install-exec-am install-info install-info-am install-man \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic mostlyclean-libtool \
	pdf pdf-am ps ps-am tags uninstall uninstall-am \
	uninstall-info-am

$(LOGDIR):
	mkdir -p $(LOGDIR)
automenu:
	@echo "Building menu entry..."
	@subdirs='$(SUBDIRS)';\
	list='$(TESTS)'; \
	dir='$(LOGDIR)'; \
	srcdir='$(top_srcdir)'; \
	output_menu=$${dir}/.automenu.xml; \
	parentfoldername=$(CHECK_PARENT_NAME); \
	echo '<?xml version="1.0"?><menu>' > $$output_menu; \
	echo '<parentMenu>$(CHECK_PARENT_NAME)</parentMenu>' >> $$output_menu;\
	for tst in $$list; do \
	  tst=$${tst/check_/} ; \
	  tst=$${tst/-/_} ; \
	  xml=$(LOGDIR)/$${tst}.xml ;\
	  if test -e "$$xml"; then \
	      successCount=`grep -c 'result="success"' $$xml`;\
	      errorCount=`grep -c 'result="error"' $$xml`;\
	      failureCount=`grep -c 'result="failure"' $$xml`;\
	      echo '<entry success="'$${successCount}'" error="'$${errorCount}'" failure="'$${failureCount}'">'$$tst'</entry>' >> $$output_menu; \
	  fi; \
	done; \
	for sub in $$subdirs; do \
	    if test -e $${dir}/$${sub}/.automenu.xml; then \
	       echo '<subDirectory name="'$${sub}'"/>' >> $$output_menu; \
	    fi; \
	done;\
	echo "</menu>" >> $$output_menu

logreport: automenu
	@echo "processing logs to html..."
	@list='$(TESTS)'; \
	srcdir='$(top_srcdir)'; \
	xsl=$${srcdir}/test/templates/logresult.xsl ; \
	xsltproc='$(XSLTENGINE)';\
	xsltproc=$${xsltproc/\%2/$$xsl};\
	xml_siteuri='$(CHECK_ROOT)' ;\
	xml_check_folder='../logs/$(CHECK_FOLDER)' ;\
	runxml='.autorun.xml';\
	if test -n "$$list"; then \
	  for tst in $$list; do \
	    tst=$${tst/check_/} ; \
	    tst=$${tst/-/_} ; \
	    checkFile=$${tst}.xml ;\
	    echo '<?xml version="1.0"?><config>' > $$runxml;\
	    echo "<baseSiteUri>$$xml_siteuri</baseSiteUri>" >> $$runxml;\
	    echo "<checkFile>$$checkFile</checkFile>" >> $$runxml;\
	    echo "<checkFolder>$$xml_check_folder</checkFolder></config>" >> $$runxml;\
	    html=$(LOGDIR)/$${tst}.html ;\
	    if test -e "$(LOGDIR)/$$xml"; then \
	        torun=$${xsltproc/\%1/$$runxml};\
	        torun=$${torun/\%3/$$html};\
	        echo "running $$torun";\
	        $$torun; \
	    fi; \
	  done; \
	else :; fi; \
	echo '<?xml version="1.0"?><config>' > $$runxml;\
	echo "<baseSiteUri>$$xml_siteuri</baseSiteUri>" >> $$runxml;\
	echo "<checkFolder>$$xml_check_folder</checkFolder></config>" >> $$runxml;\
	html=$(LOGDIR)/.index.html ;\
	torun=$${xsltproc/\%1/$$runxml};\
	torun=$${torun/\%3/$$html};\
	echo "running $$torun";\
	$$torun;
template-copy: $(LOGDIR)
	@echo copying template
	@if test -d "$(top_srcdir)/test/templates/$(CHECK_FOLDER)"; then \
	    cp $(top_srcdir)/test/templates/$(CHECK_FOLDER)/[^C]* $(LOGDIR)/;\
	fi
textlog:
	@echo "processing logs to text..."
	@srcdir='$(top_srcdir)'; \
	xsl=$${srcdir}/test/templates/checkTextResult.xsl ; \
	xsltproc='$(XSLTENGINE)';\
	xsltproc=$${xsltproc/\%2/$$xsl};\
	xml_siteuri='$(CHECK_ROOT)' ;\
	xml_check_folder='../logs/$(CHECK_FOLDER)' ;\
	runxml='.autorun.xml';\
	echo '<?xml version="1.0"?><config>' > $$runxml;\
	echo "<baseSiteUri>$$xml_siteuri</baseSiteUri>" >> $$runxml;\
	echo "<checkFolder>$$xml_check_folder</checkFolder></config>" >> $$runxml;\
	txt=$(LOGDIR)/testlog.txt ;\
	torun=$${xsltproc/\%1/$$runxml};\
	torun=$${torun/\%3/$$txt};\
	echo "running $$torun";\
	$$torun;
check-html: $(CHECK_HTML)
check-text: $(CHECK_TXT)
clean-unit:
	rm -f autorun.xml

../../logs/unit/random_maps:
	(mkdir ../../logs; mkdir ../../logs/unit; mkdir ../../logs/unit/random_maps)
../../../common/libcross.a:
	( cd ../../../common ; make libcross.a )
../../../socket/libsocket.a:
	( cd ../../../socket ; make libsocket.a )
../../../random_maps/librandom_map.a:
	( cd ../../../random_maps ; make librandom_map.a )

check-local: check-html
clean-local: clean-unit
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
